
Introduction:
    -React JS:
        - A full feature rich application ready to be deployed for production.
        - A library for building user interfaces

    Next JS:
        -A Framework of React JS
        -A package that uses React for building user interfaces
        -Loaded with a lot more features that enable you to build full fledged product ready applications.
        -There is no need to install additional packages. Next JSs provide everyting for you.
        
    Why Lean Next JS?
        -Next JS simplifies the process of building a react application for production.
        -File based Routing
        -Pre-rendering feature
        -Pre-redering, so SEO friendly
        -API Routes.
        -Full stack Framework
        -Support for CSS modules
        -Authentication: support multple athentication system

Course Contents:
    01. Pre-requisites
    02. Installtions
    03. Two Forms of Pre-Rendeing



    04. To Run CLI
    02. References
    00. Conclusion

01. Pre-requisites:
    -HTML, CSS and Javascript Fundamentals
    -ES6 + features
    -React Fundamentals    

02. Installtions:
    -Latest Node Version
    -Editor like VS Code

    Package Installtions:
        Next js CLI: npx create-next-app nextjs-fundamentals

03. Two Forms of Pre-Rendeing followed by
    i)  Stattic Site Generation(SSG)
    ii) Server Site Pre-Rending (SSR)

    i)  Stattic Site Generation(SSG):
        -   The Html is statically generated at build time.The built page is then cached and reused for each request

        -   For a Dynamic page with getStaticPaths and fallback set to true is not generated at build time
            but is generated on the initial request

        -   With increamental static generation, a page can be regenerated for a request after the revalidation time has elapsed

        -   For the most part, the pages are generated using getStaticProps when you build the project.

    ii) Server Site Pre-Rending (SSR)
        Definition of SSR:
            -   SSR is a form of pre-rendering where the HTML is generated at request time

            -   SSR is requied when you need to fetch data per request and also when you need to fetch personalized data keeping in mind SEO
        
        Features:
            i)  getServerSideProps()
                Retuns value per request

                Example:                 
                    export const getServerSideProps = async () => {
                    const data = await axios.get('http://localhost:4000/news')
                        .then(res => {
                        return res.data
                        })

                        return {
                        props:{
                            articles:data
                        }
                        }
                    }

        SSR With Dynamic Parameters:
            The param can be retrieved by context, Here the category parameter is achieved by destructing the context 

            Example:                
                export const getServerSideProps = async (context) => {
                const { params,req,res,query } = context;
                console.log(query)
                //console.log(req);
                console.log(req.headers.cookie);
                res.setHeader('Set-Cookie',['name=NEXTJS_FUNDAMENTALS']);

                //console.log(res);

                const { category } = params;

                let data = await axios.get(`http://localhost:4000/news?category=${category}`)
                                    .then(response => {
                                        return response.data;
                                    })

                return {
                        props: {
                            articles: data
                        }
                    }
                }

        Client-side Data Fetching:
            In react application, if it is not necessary for SEO compatible,
            hence, it will be the best choice to fetch data on client side instead of pre-rendering the page 
            either SSG or SSR

            To display daashboard data, here seo not needed to index
            Example :
                import axios from 'axios';
                import { useEffect, useState } from 'react';

                const Dashboard = () => {

                    const [isLoading, setIsLoading] = useState(true);
                    const [dashboardData, setDashboardData] = useState(null);

                    useEffect(() => {
                        fetchDashboardData();
                    },[]) //this [] depending on component mount

                    const fetchDashboardData = async () => {
                        await axios.get('http://localhost:4000/dashboard')
                                    .then(res => {
                                        setDashboardData(res.data);
                                        setIsLoading(false);
                                    })

                    }

                    if(isLoading){
                        return <h1>Loading......</h1>
                    }

                    return (
                        <div>
                            <h1>Dashbaord</h1>
                            <h4>Post {dashboardData.posts}</h4>
                            <h4>Likes {dashboardData.likes}</h4>
                            <h4>Followers {dashboardData.followers}</h4>
                            <h4>Following {dashboardData.following}</h4>
                            
                        </div>
                    )
                }

                export default Dashboard

        SWR for Client-side Data Fetching:
            Installtion: 
                CLI: npm i swr

            Why? both are rendering on client side, changes showing after page refresh
            on the other hand swr can happend while browser tab clicking.
            
            Example: 
            import useSWR from 'swr';

            const fetchDashboardData = async () => {    
                // const resData = await axios.get('http://localhost:4000/dashboard')
                //     .then(res => {
                //         console.log(res.data);
                //         return res.data
                //     });

                const resData = await fetch('http://localhost:4000/dashboard');       

                const data = resData.json();

                return data;
            }

            const DashboardSWR = () => {      

                const { data, error } = useSWR('dashboard',  fetchDashboardData)

                if (error) {
                    return <h1>An Error Occurred</h1>
                }

                if (!data) {
                    return <h1>Dashboard Data Not found.</h1>
                }

                return (
                    <div>
                        <h1>Dashbaord</h1>
                        <h4>Post {data.posts}</h4>
                        <h4>Likes {data.likes}</h4>
                        <h4>Followers {data.followers}</h4>
                        <h4>Following {data.following}</h4>

                    </div>
                )
            }

            export default DashboardSWR

        Pre rendering + Client side Data Fetching:
            As the getServerSideProps that only be used to fetch and render the data from server side pre-rendering.
            On the other hand, we can get value from client side and can change the url without calling the getServerSideProps using
            router.push(`/events?category=${catetory}`, undefined, { shallow: true })

            Let's follow the below example....

            import axios from 'axios';
            import Link from 'next/link';
            import { useRouter } from 'next/router';
            import React, { useState } from 'react';


            const Events = ({ eventList }) => {

                console.log(eventList)
                const [events, setEvents] = useState(eventList);
                const router = useRouter();

                const fetchEventsByCategory = async (catetory) => {
                    //const data =

                    await axios.get(`http://localhost:4000/events?category=${catetory}`)
                        .then(res => {
                            //return res.data
                            setEvents(res.data);
                            router.push(`/events?category=${catetory}`, undefined, { shallow: true })
                        });

                    // const filteredEvents = {
                    //     events: data
                    // }

                    //setEvents(filteredEvents.events);
                }

                return (
                    <div>
                        <button style={{ backgroundColor: 'pink' }} onClick={() => fetchEventsByCategory('music')}>Music Events</button>
                        <hr />
                        <h1>List of Event</h1>
                        {
                            events.map((item, index) => {
                                return (
                                    <div key={index}>
                                        <h4> {item.id}. Name: {item.title} | Category: {item.category}</h4>
                                    </div>
                                )
                            })
                        }

                        <hr />
                        <Link href="/" replace passHref>
                            Back to Home
                        </Link>
                    </div>
                )
            }

            export default Events


            export const getServerSideProps = async (context) => {
                const { query } = context;
                //console.log(query)
                const { category } = query;
                //console.log(category)
                const queryString = category && category != '' ? `category=${category}` : '';
                const data = await axios.get(`http://localhost:4000/events?${queryString}`)
                    .then(res => {
                        return res.data;
                    });

                return {
                    props: {
                        eventList: data
                    }
                }
            }

        API Routes:
            -   API Routes allow you to create RESTFUL endpoints as part of your next.js application folder structure
            -   Withing the pages folder, you need to create a folder called "api"
            -   Within that "api" folder, you can define all the APIs for your application
            -   You can add business logic withour needing to write any additional custom server code and withouit having to configure any API Routes
            
        Global Styles:


        Authentication:
            CLI: npm i next-auth


            


        

            


            






04. To Run CLI:
    -For running on dev environment
        CLI: npm run dev
    -For making a build version in .next folder and to start the server
        CLI: npm run build
        CLI: npm start







References:
    -https://www.youtube.com/watch?v=9P8mASSREYM&list=PLC3y8-rFHvwgC9mj0qv972IO5DmD-H0ZH&ab_channel=Codevolution

Conclusion

